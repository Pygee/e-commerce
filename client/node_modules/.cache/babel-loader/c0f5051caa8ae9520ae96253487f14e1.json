{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tonipylvalainen/Desktop/Projectfiles/e-commerce-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/tonipylvalainen/Desktop/Projectfiles/e-commerce-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import ShopActionTypes from\"./shop.types\";import{firestore,convertCollectionsSnaphotToMap}from\"../../firebase/firebase.utils\";export var fetchCollectionStart=function fetchCollectionStart(){return{type:ShopActionTypes.FETCH_COLLECTIONS_START};};export var fetchCollectionsSuccess=function fetchCollectionsSuccess(collectionsMap){return{type:ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,payload:collectionsMap};};export var fetchCollectionsFailure=function fetchCollectionsFailure(errorMessage){return{type:ShopActionTypes.FETCH_COLLECTIONS_FAILURE,payload:errorMessage};};export var fetchCollectionsStartAsync=function fetchCollectionsStartAsync(){return function(dispatch){var collectionRef=firestore.collection(\"collections\");dispatch(fetchCollectionStart());collectionRef.get().then(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(snapShot){var collectionsMap;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:collectionsMap=convertCollectionsSnaphotToMap(snapShot);dispatch(fetchCollectionsSuccess(collectionsMap));case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}()).catch(function(error){return dispatch(fetchCollectionsFailure(error.message));});};};","map":{"version":3,"sources":["/Users/tonipylvalainen/Desktop/Projectfiles/e-commerce-clothing/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnaphotToMap","fetchCollectionStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapShot","catch","error","message"],"mappings":"uXAAA,MAAOA,CAAAA,eAAP,KAA4B,cAA5B,CACA,OACEC,SADF,CAEEC,8BAFF,KAGO,+BAHP,CAKA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,SAAO,CACzCC,IAAI,CAAEJ,eAAe,CAACK,uBADmB,CAAP,EAA7B,CAIP,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,cAAc,QAAK,CACxDH,IAAI,CAAEJ,eAAe,CAACQ,yBADkC,CAExDC,OAAO,CAAEF,cAF+C,CAAL,EAA9C,CAKP,MAAO,IAAMG,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,YAAY,QAAK,CACtDP,IAAI,CAAEJ,eAAe,CAACY,yBADgC,CAEtDH,OAAO,CAAEE,YAF6C,CAAL,EAA5C,CAKP,MAAO,IAAME,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,EAAM,CAC9C,MAAO,UAAAC,QAAQ,CAAI,CACjB,GAAMC,CAAAA,aAAa,CAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CACAF,QAAQ,CAACX,oBAAoB,EAArB,CAAR,CAEAY,aAAa,CACVE,GADH,GAEGC,IAFH,0FAEQ,iBAAMC,QAAN,qIACEZ,cADF,CACmBL,8BAA8B,CAACiB,QAAD,CADjD,CAEJL,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR,CAFI,sDAFR,gEAMGa,KANH,CAMS,SAAAC,KAAK,QAAIP,CAAAA,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAAZ,EANd,EAOD,CAXD,CAYD,CAbM","sourcesContent":["import ShopActionTypes from \"./shop.types\";\nimport {\n  firestore,\n  convertCollectionsSnaphotToMap\n} from \"../../firebase/firebase.utils\";\n\nexport const fetchCollectionStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\n\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionStart());\n\n    collectionRef\n      .get()\n      .then(async snapShot => {\n        const collectionsMap = convertCollectionsSnaphotToMap(snapShot);\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n      })\n      .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}